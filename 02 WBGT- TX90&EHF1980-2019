var geometry =ee.FeatureCollection("users/yunswu/studyarea/CHN_province").geometry(); 
var TX90 = ee.Image("projects/starlit-vim-392703/assets/CN_WBGT_EHF/TX90")
var collection = ee.ImageCollection('projects/starlit-vim-392703/assets/WBGT');
 
// 函数：从图像中减去273.15
var subtractValue = function(image) {
  return image.subtract(ee.Image(273.15)).copyProperties(image, image.propertyNames());
};

// 函数：从图像ID中提取日期并转换为日期格式
var extractDateFromID = function(image) {
  // 提取Image的ID
  var id = ee.String(image.get('system:index'));

  // 从ID中提取日期信息
  var dateStr = id.slice(9); // 提取“WBGT_max_”后的部分

  // 将日期字符串转换为日期格式
  var date = ee.Date.parse('yyyyMMdd', dateStr);

  // 使用日期设置新的 date 属性和 system:time_start 属性
  return image.set({
    'date': date.format('yyyyMMdd'),
    'system:time_start': date.millis()
  });
};

//********************************************last3060********************

// 使用映射函数从ID中提取日期信息
var addDateProperty = function(image) {
  var id = image.id();
  var dateStr = id.slice(9);  // 提取日期部分，例如“19800501”
  return image.set('ID_date', dateStr);
};

var withDate = collection.map(addDateProperty);

// 根据日期属性进行排序
var sortedCollection = withDate.sort('ID_date', false);

// 选取前100个图像（即原始集合中的最后100个）
var last3060 = sortedCollection.limit(3060).map(subtractValue).map(extractDateFromID);

print("last3060",last3060);


// **************选取前3060个图像************************************
// var first3060 = collection.limit(3060).map(subtractValue).map(extractDateFromID);

// // 打印结果以验证
// print("first3060",first3060);


//************************************************

//add property DOY
function siloset(image){
    var idno =  image.get("system:time_start");
    // var date =  image.get('Date');
    var lens = ee.String(idno).length();
    var year = ee.String(idno).slice(0,4);
    var no   = ee.Image(image).date().getRelative( 'day','year');
    no       = ee.Number.parse(no);
    return image.setMulti({
            // 'system:time_start' :date,
            // 'system:time_end'   :date,
            'year'              :year,
            'no'                :no 
    });
}


//find summer period
function silotemp(year){
  var stryear = year.toString();
  var start = stryear.concat('-05-07');
  start = ee.Date(start);
  var end   = start.advance(5,'month');
  var yearofsilo = last3060.filterDate(start,end);
  // var yearofsilo = first3060.filterDate(start,end);
  //print(yearofsilo)
  return yearofsilo;
}

// var silotempcol = first3060.map(siloset);
var silotempcol = last3060.map(siloset);
print("silotempcol", silotempcol)

//***************************************************** TX90 calculate  ******************
// var TX90 =  silotempcol.reduce(ee.Reducer.percentile([90]))
// print(" TX90", TX90)

// var visualization = {
//     // bands: ['temperature_2m'],
//     min: 10.0,
//     max: 35.0,
//     palette: [
//       "#000080","#0000D9","#4000FF","#8000FF","#0080FF","#00FFFF",
//       "#00FF80","#80FF00","#DAFF00","#FFFF00","#FFF500","#FFDA00",
//       "#FFB000","#FFA400","#FF4F00","#FF2500","#FF0A00","#FF00FF",
//     ]
//   };
// Map.setCenter(105.2, 30.4, 2);
// Map.addLayer(TX90, visualization,"TX90")

function export_img(img, folder, task){
      Export.image.toAsset({
            image : img,
            description: task,
            assetId: folder.concat('/').concat(task),
            //range: [-0.125, -90.125, 179.875, 90.125],
            //dimensions:"1440x721",
            crs:"EPSG:4326",
            scale: 27830,
            region:geometry.bounds(),
            //crsTransform: [0.25, 0, -180, 0, -0.25, 89.875],
            maxPixels: 1e13
      });
  }
//   // var outstr = 'Merged_EHF_'+i.toString();
//   export_img(TX90,"projects/starlit-vim-392703/assets/CN_WBGT_EHF", 'TX90');  
//********************************************************************************************
var i;
for (i = 2000; i < 2020; i++) {
  // var i = 1980;
  var EHFcol = silotemp(i);
  
  print("EHFcol",EHFcol)
  
  function movesevenxavg(ImgCol, win_back, win_forw) {
      if (typeof win_back === 'undefined') { win_back = 0; }
      if (typeof win_forw === 'undefined') { win_forw = 0; }
  
      win_back = ee.Number(win_back);
      win_forw = ee.Number(win_forw);
  
      // print(win_back, win_forw, n);
      var n = ImgCol.size();
      var y = ImgCol.toList(n);
      //print(y.get(1));
      // print(win_back, win_forw, n);
  
      // 1. i: [0, win_back - 1], I = [0, i+win_forw]
      var headval = ee.List.sequence(0, win_back.subtract(1)) //index begin at 0
          // .aside(print, 'head')
          .map(function(i) {
              i = ee.Number(i);
              var I_beg = i.subtract(win_back).max(0);
              var I_end = i.add(win_forw).add(1); //end exclusive, so add 1
              //print(I_beg)
              //print(I_end)
              var image = ee.Image(y.get(i));
              var avgmean = ee.ImageCollection(y.slice(I_beg, I_end)).mean();
              var tempimage = avgmean.subtract(TX90);
              tempimage = tempimage.rename('EHF');
              return image.addBands(tempimage);
              //return ee.ImageCollection(y.slice(I_beg, I_end)).mean().copyProperties(y.get(i), prop_global);
              
          });
      // 2. i: [(n - win_forw), n - 1], I = [i - win_forw, n]
      var tailval = ee.List.sequence(n.subtract(win_forw), n.subtract(1))
          // .aside(print,'tail')
          .map(function(i) {
              i = ee.Number(i);
              var I_beg = i.subtract(win_back);
              var I_end = i.add(win_forw).add(1).min(n);
              var image = ee.Image(y.get(i));
              var avgmean = ee.ImageCollection(y.slice(I_beg, I_end)).mean();
              var tempimage = avgmean.subtract(TX90);
              tempimage = tempimage.rename('EHF');
              return image.addBands(tempimage);
              //return ee.ImageCollection(y.slice(I_beg, I_end)).mean().copyProperties(y.get(i), prop_global);
          });
      // 3. i: [win_back, n - win_forw - 1], I = [i - win_back, i + win_forw]
      var midval = ee.List.sequence(win_back, n.subtract(win_forw).subtract(1))
          // .aside(print, 'mid')
          .map(function(i) {
              i = ee.Number(i);
              //var I_beg = i;
              //var I_end = i.add(win_forw).add(1);
              //var image = ee.Image(y.get(i));
              //var avgmean = ee.ImageCollection(y.slice(I_beg, I_end)).mean();
              
              var I_beg = i.subtract(win_back);
              var I_end = i.add(win_forw).add(1);
              var image = ee.Image(y.get(i));
              var avgmean = ee.ImageCollection(y.slice(I_beg, I_end)).mean();
              
              var tempimage = avgmean.subtract(TX90);
              tempimage = tempimage.rename('EHF');
              return image.addBands(tempimage);
              //return ee.ImageCollection(y.slice(I_beg, I_end)).mean().copyProperties(y.get(i), prop_global);
          });
  
      var ymov = headval.cat(midval).cat(tailval);
      // print('ans', ans);
      return ee.ImageCollection(ymov);
  }
  
    var filterTimeEq = ee.Filter.equals({
      leftField : 'system:time_end',
      rightField: 'system:time_end'
    });
    
    function joinfea(feature) {return ee.Image(feature.get('primary')).addBands(feature.get('secondary'));}
    
    function InnerJoin(primary, secondary, filter, join) {
        join = typeof join !== 'undefined' ?  join : ee.Join.inner();
        var JoinedImgCol_raw = join.apply(primary, secondary, filter); //Joins two collections
        var joinedImgCol = JoinedImgCol_raw.map(joinfea);
        return ee.ImageCollection(joinedImgCol);
    }
    
    function strcon(x) {return ee.String('EHF_').cat(ee.Date(x).format('YYYY_MM_dd'));}
    
  
    
    var startdate = i.toString()+'-05-01';
    var enddate   = ee.Date(startdate).advance(5,"month");
    
    var eracol = silotempcol.filterDate(startdate,enddate).select('b1');
    // eracol = eracol.map(meanfunc);
    // print("eracol",eracol)
    var EHF_Dataset = movesevenxavg(eracol, 7, 7);
  //   var eracol = ee.ImageCollection(yearlyDailyMinMaxTemps).filterDate(startdate,enddate).select('temperature_2m_min');
  // var EHF_Dataset = movesevennavg(eracol, 7, 7);
  // print(EHF_Dataset)
  
    
    var stryear  = i.toString();
    var startEHF = stryear.concat('-05-01');
    var startEHF = ee.Date(startEHF); 
    var endEHF   = startEHF.advance(5,'month');
    
    EHF_Dataset = EHF_Dataset.filterDate(startEHF,endEHF);
    print("EHF_Dataset",EHF_Dataset)
    
    var img_out = EHF_Dataset.toArray();
    var ids = ee.List(EHF_Dataset.aggregate_array('system:time_start')).map(strcon);
    img_out = img_out.arraySlice(1, -1).arrayProject([0]).arrayFlatten([ids]);//convert into image;
    // print("img_out",img_out)
    var outstr = 'Merged_EHF_MAX_'+i.toString();
    export_img(img_out, 'projects/starlit-vim-392703/assets/CN_WBGT_EHF', outstr);

}  
  
  
